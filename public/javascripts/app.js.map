{"version":3,"sources":["app.js","app.module.js","app.config.js","issues-table.component.js","issues.controller.js","issues.service.js"],"names":["angular","module","run","editableOptions","theme","config","$httpProvider","defaults","headers","common","constant","IssuesTableController","doEvent","$event","preventDefault","stopPropagation","$ctrl","this","sortItem","reverse","openedStart","openedEnd","sortBy","name","openStart","$index","openEnd","prepareChanges","pTask_id","pField","pData","onChanges","task_id","field","data","saveChanges","onSave","cancel","onCancel","console","log","hideIssue","onHide","hideIssue2","pIndex","items","splice","component","templateUrl","bindings","controller","IssuesController","IssuesService","$scope","error","showAll","getIssues","cancelChanges","then","response","refreshIssues","getData","$$watchersCount","exportIssues","filter","blob","Blob","type","contentType","objectUrl","URL","createObjectURL","a","document","createElement","href","target","download","body","appendChild","click","$inject","$http","$window","get_issues_URL","save_issues_URL","get_report_URL","hide_issue_URL","getNewPeriod","pIssue1","pIssue2","pIntersectionType","nDt3","nDt4","period","start_date","end_date","getDate","plusDays","pDate","pDays","Date","getFullYear","getMonth","getIndexByTask_id","issues","index","i","length","getIssueByTask_id","currentIssue","srv","issuesClone","changedTaskIds","allowCrossing","get","responseType","forEach","issue","copy","location","getChangedIssues","resArray","tId","push","executors","customer","ord","progress","put","undefined","addChangedTaskId","getIntersectionType","pTask_id1","pTask_id2","d1","d2","d3","d4","intersectionType","fullCompare","pD1","pD2","pD3","pD4","res","getTime","nextIssue","tp","newPeriod","service"],"mappings":"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","file":"app.js","sourcesContent":["\"use strict\";\n\n(function () {\n  'use strict';\n\n  angular.module(\"app\", [\"xeditable\", \"ui.bootstrap\"]).run(function (editableOptions) {\n    editableOptions.theme = 'bs3';\n  });\n})();\n'use strict';\n\n(function () {\n  \"use strict\";\n\n  angular.module('app').config(function ($httpProvider) {\n    $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n  }).constant('get_issues_URL', 'issues').constant('save_issues_URL', 'savechanges').constant('get_report_URL', 'report').constant('hide_issue_URL', 'hideissue');\n})();\n'use strict';\n\n(function () {\n  \"use strict\";\n\n  angular.module('app').component('issuesTable', {\n    templateUrl: 'assets/issues-table.html',\n    bindings: {\n      items: '<',\n      onChanges: '&',\n      onCancel: '&',\n      onSave: '&',\n      onHide: '&'\n    },\n    controller: IssuesTableController\n  });\n\n  function IssuesTableController() {\n    var $ctrl = this;\n    $ctrl.sortItem = null;\n    $ctrl.reverse = false;\n    $ctrl.openedStart = {};\n    $ctrl.openedEnd = {};\n\n    $ctrl.sortBy = function (name) {\n      $ctrl.reverse = $ctrl.sortItem === name ? !$ctrl.reverse : false;\n      $ctrl.sortItem = name;\n    };\n\n    $ctrl.openStart = function ($event, $index) {\n      doEvent($event);\n      $ctrl.openedStart[$index] = !$ctrl.openedStart[$index];\n    };\n\n    $ctrl.openEnd = function ($event, $index) {\n      doEvent($event);\n      $ctrl.openedEnd[$index] = !$ctrl.openedEnd[$index];\n    };\n\n    function doEvent($event) {\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    $ctrl.prepareChanges = function (pTask_id, pField, pData) {\n      $ctrl.onChanges({ task_id: pTask_id, field: pField, data: pData });\n    };\n\n    $ctrl.saveChanges = function () {\n      $ctrl.onSave();\n    };\n\n    $ctrl.cancel = function () {\n      $ctrl.onCancel();\n      console.log(\"Cancel changes.\");\n    };\n\n    $ctrl.hideIssue = function (pTask_id) {\n      $ctrl.onHide({ task_id: pTask_id });\n    };\n\n    $ctrl.hideIssue2 = function (pIndex) {\n      $ctrl.items.splice(pIndex, 1);\n    };\n  }\n})();\n'use strict';\n\n(function () {\n  \"use strict\";\n\n  angular.module('app').controller('IssuesController', IssuesController);\n\n  IssuesController.$inject = ['IssuesService', '$scope'];\n  function IssuesController(IssuesService, $scope) {\n    var $ctrl = this;\n    $ctrl.error = \"\";\n    $ctrl.showAll = false;\n\n    $ctrl.getIssues = IssuesService.getIssues;\n\n    $ctrl.prepareChanges = IssuesService.prepareChanges;\n    $ctrl.hideIssue = IssuesService.hideIssue;\n    $ctrl.cancelChanges = IssuesService.cancelChanges;\n\n    $ctrl.saveChanges = function () {\n      var promise = IssuesService.saveChanges();\n      promise.then(function (response) {\n        $ctrl.error = response;\n      }, function (response) {\n        $ctrl.error = response;\n      });\n    };\n\n    $ctrl.refreshIssues = function () {\n      var promise = IssuesService.getData();\n      promise.then(function (response) {\n        $ctrl.error = response;\n      });\n\n      console.log(\"# of Watchers: \", $scope.$$watchersCount);\n      console.log(\"$ctrl.getIssues:\", $ctrl.getIssues());\n    };\n\n    $ctrl.exportIssues = function (filter) {\n      var promise = IssuesService.exportIssues(filter);\n      promise.then(function (response) {\n        if (response.error) $ctrl.error = \"Ошибка экспорта файла.\";else {\n          var blob = new Blob([response.data], { type: response.contentType });\n          var objectUrl = URL.createObjectURL(blob);\n          var a = document.createElement('a');\n          a.href = objectUrl;\n          a.target = '_blank';\n          a.download = 'report.xls';\n          document.body.appendChild(a);\n          a.click();\n        }\n      });\n    };\n\n    // начальная загрузка данных\n    $ctrl.refreshIssues();\n  }\n})();\n'use strict';\n\n(function () {\n  \"use strict\";\n\n  angular.module('app').service('IssuesService', IssuesService);\n\n  IssuesService.$inject = ['$http', '$window', 'get_issues_URL', 'save_issues_URL', 'get_report_URL', 'hide_issue_URL'];\n  function IssuesService($http, $window, get_issues_URL, save_issues_URL, get_report_URL, hide_issue_URL) {\n    var srv = this;\n    srv.issues = {};\n    srv.issuesClone = {};\n    srv.changedTaskIds = {};\n    srv.allowCrossing = true;\n    srv.getIssues = function () {\n      return srv.issues;\n    };\n\n    srv.exportIssues = function (filter) {\n      return $http.get(get_report_URL + \"/\" + filter, { responseType: \"blob\" }).then(function (response) {\n        return {\n          data: response.data,\n          contentType: response.headers(\"Content-Type\")\n        };\n      }, function (response) {\n        return { error: true };\n      });\n    };\n\n    srv.getData = function () {\n      return $http.get(get_issues_URL).then(function (response) {\n        response.data.issues.forEach(function (issue) {\n          if (issue.start_date != null) issue.start_date = new Date(issue.start_date);\n          if (issue.end_date != null) issue.end_date = new Date(issue.end_date);\n        });\n\n        srv.issues = response.data;\n        srv.issuesClone = angular.copy(srv.issues);\n        return {};\n      }, function (response) {\n        $window.location.href = '/login';\n        return response.data.error;\n      });\n    };\n\n    srv.getChangedIssues = function () {\n      var resArray = [];\n      for (var tId in srv.changedTaskIds) {\n\n        srv.issues.issues.forEach(function (issue) {\n          if (issue.task_id === tId) resArray.push({ task_id: issue.task_id,\n            start_date: issue.start_date,\n            end_date: issue.end_date,\n            executors: issue.executors,\n            customer: issue.customer,\n            ord: issue.ord,\n            progress: issue.progress });\n        });\n      }\n      return resArray;\n    };\n\n    srv.saveChanges = function () {\n      var resArray = srv.getChangedIssues();\n      console.log(\"saveChanges\", resArray);\n      return $http.put(save_issues_URL, resArray).then(function (response) {\n        srv.changedTaskIds = {};\n        console.log(\"Changes was saved\", response.data);\n        return response.data;\n      }, function (response) {\n        console.log(\"Error has occurred when saving changes\", response.data);\n        return response.data;\n      });\n    };\n\n    srv.cancelChanges = function () {\n      srv.issues = angular.copy(srv.issuesClone);\n      console.log(\"Changes were canceled.\");\n    };\n\n    srv.hideIssue = function (task_id) {\n      console.log(\"hideIssue\", task_id);\n\n      return $http.put(hide_issue_URL, { task_id: task_id }).then(function (response) {\n        var index = getIndexByTask_id(task_id, srv.issues.issues);\n        if (index === undefined) {\n          console.log(\"The issue was not found\", task_id);\n        } else {\n          srv.issues.issues.splice(index, 1);\n          srv.issuesClone.issues.splice(index, 1);\n          console.log(\"The issue was hidden\", task_id);\n        }\n      }, function (response) {\n        console.log(\"Errors occurred when hiding the issue\", task_id);\n      });\n    };\n\n    srv.addChangedTaskId = function (pTask_id) {\n      srv.changedTaskIds[pTask_id] = 1;\n      console.log(\"srv.changedTaskIds\", srv.changedTaskIds);\n    };\n\n    srv.getIntersectionType = function (pTask_id1, pTask_id2) {\n      var d1 = null;\n      var d2 = null;\n      var d3 = null;\n      var d4 = null;\n      var intersectionType = -1;\n\n      var fullCompare = function fullCompare(pD1, pD2, pD3, pD4) {\n        var res = 0;\n        if (pD1 < pD3 && pD2 >= pD3 && pD2 < pD4) res = 1;\n        if (pD3 < pD1 && pD4 >= pD1 && pD4 < pD2) res = 2;\n        if (pD1 <= pD3 && pD4 <= pD2) res = 3;\n        if (pD1 >= pD3 && pD4 > pD2 || pD1 > pD3 && pD4 >= pD2) res = 4;\n        return res;\n      };\n\n      srv.issues.issues.forEach(function (issue) {\n        if (issue.task_id == pTask_id1) {\n          d1 = issue.start_date;\n          d2 = issue.end_date;\n        }\n        if (issue.task_id == pTask_id2) {\n          d3 = issue.start_date;\n          d4 = issue.end_date;\n        }\n      });\n\n      if (pTask_id1 != null && pTask_id2 != null) {\n        intersectionType = 0;\n        if (d1 != null && d2 != null && d3 != null) {\n          if (d4 == null) {\n            if (d3 < d1 || d3 > d2) intersectionType = 0;else intersectionType = 1;\n          } else {\n            intersectionType = fullCompare(d1, d2, d3, d4);\n          }\n        }\n\n        if (d3 != null && d4 != null && d1 != null) {\n\n          if (d2 == null) {\n            if (d1 < d3 || d1 > d4) intersectionType = 0;else intersectionType = 2;\n          } else {\n            intersectionType = fullCompare(d1, d2, d3, d4);\n          }\n        }\n      }\n\n      return intersectionType;\n    };\n\n    srv.prepareChanges = function (pTask_id, pField, pData) {\n\n      var currentIssue = getIssueByTask_id(pTask_id, srv.issues.issues);\n\n      switch (pField) {\n        case \"start_date\":\n          if (currentIssue.end_date != null && pData > currentIssue.end_date) {\n            var period = 0;\n            if (currentIssue.start_date != null) period = currentIssue.end_date.getDate() - currentIssue.start_date.getDate();\n            currentIssue.end_date = plusDays(pData, period);\n          }\n          currentIssue[pField] = new Date(pData.getTime());\n          break;\n\n        case \"end_date\":\n          if (currentIssue.start_date != null && pData < currentIssue.start_date) {\n            var period = 0;\n            if (currentIssue.end_date != null) period = currentIssue.end_date.getDate() - currentIssue.start_date.getDate();\n            currentIssue.start_date = plusDays(pData, -period);\n            srv.addChangedTaskId(pTask_id);\n          }\n          currentIssue[pField] = new Date(pData.getTime());\n          break;\n\n        default:\n          currentIssue[pField] = pData;\n      }\n\n      srv.addChangedTaskId(pTask_id);\n\n      // сдвиг периодов задач ,если есть пересечение\n      if (!srv.allowCrossing) srv.issues.issues.forEach(function (nextIssue) {\n        if (nextIssue.task_id != pTask_id && (pField === \"start_date\" || pField === \"end_date\")) {\n          var tp = srv.getIntersectionType(currentIssue.task_id, nextIssue.task_id);\n          console.log(\"IntersectionType:\", tp);\n\n          if (tp > 0) {\n            var newPeriod = getNewPeriod(currentIssue, nextIssue, tp);\n            nextIssue.start_date = newPeriod[0];\n            nextIssue.end_date = newPeriod[1];\n            srv.addChangedTaskId(nextIssue.task_id);\n          }\n        }\n      });\n\n      console.log(\"srv.changedTaskIds\", srv.changedTaskIds);\n      console.log(\"srv.issues\", srv.issues);\n    };\n\n    function getNewPeriod(pIssue1, pIssue2, pIntersectionType) {\n      var nDt3 = null;\n      var nDt4 = null;\n      var period = 0;\n      if (pIssue2.start_date != null && pIssue2.end_date != null) period = pIssue2.end_date.getDate() - pIssue2.start_date.getDate();\n\n      switch (pIntersectionType) {\n        case 1:\n          nDt3 = plusDays(pIssue1.end_date, 1);\n          if (pIssue2.end_date != null) nDt4 = plusDays(nDt3, period);\n          break;\n\n        case 2:\n          nDt4 = plusDays(pIssue1.start_date, -1);\n          if (pIssue2.end_date != null) nDt3 = plusDays(nDt4, -period);\n          break;\n\n        case (3, 4):\n          nDt3 = plusDays(pIssue1.end_date, 1);\n          nDt4 = plusDays(nDt3, period);\n      }\n      return [nDt3, nDt4];\n    }\n\n    function plusDays(pDate, pDays) {\n      return new Date(pDate.getFullYear(), pDate.getMonth(), pDate.getDate() + pDays);\n    }\n\n    function getIndexByTask_id(pTask_id, issues) {\n      var index;\n      for (var i = 0; i < issues.length; i++) {\n        if (issues[i].task_id === pTask_id) {\n          index = i;\n          break;\n        }\n      }return index;\n    }\n\n    function getIssueByTask_id(pTask_id, issues) {\n      var currentIssue = null;\n      for (var index in issues) {\n        currentIssue = issues[index];\n        if (currentIssue.task_id == pTask_id) {\n          break;\n        }\n      }\n      return currentIssue;\n    }\n  }\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module(\"app\", [\"xeditable\", \"ui.bootstrap\"])\r\n\r\n.run(function(editableOptions) {\r\n  editableOptions.theme = 'bs3';\r\n});\r\n\r\n})();\r\n","(function () {\r\n\"use strict\";\r\n\r\nangular.module('app')\r\n\r\n.config(function($httpProvider) {\r\n  $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\r\n})\r\n\r\n.constant('get_issues_URL', 'issues')\r\n.constant('save_issues_URL', 'savechanges')\r\n.constant('get_report_URL', 'report')\r\n.constant('hide_issue_URL', 'hideissue');\r\n\r\n})();\r\n","\r\n(function () {\r\n\"use strict\";\r\n\r\nangular.module('app')\r\n.component('issuesTable', {\r\n  templateUrl: 'assets/issues-table.html',\r\n  bindings: {\r\n    items: '<'\r\n   ,onChanges: '&'\r\n   ,onCancel:  '&'\r\n   ,onSave:    '&'\r\n   ,onHide:    '&'\r\n  },\r\n  controller: IssuesTableController\r\n});\r\n\r\nfunction IssuesTableController() {\r\n  const $ctrl = this;\r\n  $ctrl.sortItem = null;\r\n  $ctrl.reverse = false;\r\n  $ctrl.openedStart = {};\r\n  $ctrl.openedEnd   = {};\r\n\r\n  $ctrl.sortBy = function(name) {\r\n    $ctrl.reverse  = ($ctrl.sortItem === name) ? !$ctrl.reverse : false;\r\n    $ctrl.sortItem = name;\r\n  };\r\n\r\n  $ctrl.openStart = ($event, $index) => {\r\n\t  doEvent($event);\r\n\t  $ctrl.openedStart[$index] = !$ctrl.openedStart[$index];\r\n  };\r\n\r\n  $ctrl.openEnd = ($event, $index) => {\r\n    doEvent($event);\r\n    $ctrl.openedEnd[$index] = !$ctrl.openedEnd[$index];\r\n  };\r\n\r\n  function doEvent($event) {\r\n    $event.preventDefault();\r\n\t  $event.stopPropagation();\r\n  }\r\n\r\n  $ctrl.prepareChanges = (pTask_id, pField, pData) => {\r\n\t  $ctrl.onChanges({task_id: pTask_id, field: pField, data: pData});\r\n  };\r\n\r\n  $ctrl.saveChanges = () => {\r\n\t  $ctrl.onSave();\r\n  };\r\n\r\n  $ctrl.cancel = () => {\r\n    $ctrl.onCancel();\r\n    console.log(\"Cancel changes.\");\r\n  };\r\n\r\n  $ctrl.hideIssue = (pTask_id) => {\r\n    $ctrl.onHide({task_id: pTask_id});\r\n  };\r\n\r\n  $ctrl.hideIssue2 = (pIndex) => {\r\n    $ctrl.items.splice(pIndex, 1);\r\n  };\r\n\r\n}\r\n\r\n})();\r\n","(function () {\r\n\"use strict\";\r\n\r\nangular.module('app')\r\n.controller('IssuesController', IssuesController);\r\n\r\nIssuesController.$inject = ['IssuesService', '$scope'];\r\nfunction IssuesController(IssuesService, $scope) {\r\n  const $ctrl = this;\r\n  $ctrl.error = \"\";\r\n  $ctrl.showAll = false;\r\n\r\n  $ctrl.getIssues = IssuesService.getIssues;\r\n\r\n  $ctrl.prepareChanges = IssuesService.prepareChanges;\r\n  $ctrl.hideIssue      = IssuesService.hideIssue;\r\n  $ctrl.cancelChanges  = IssuesService.cancelChanges;\r\n\r\n  $ctrl.saveChanges = () => {\r\n    const promise = IssuesService.saveChanges();\r\n    promise\r\n      .then(function(response){\r\n        $ctrl.error = response;\r\n      }, function(response) {\r\n        $ctrl.error = response;\r\n      });\r\n  };\r\n\r\n  $ctrl.refreshIssues = () => {\r\n    const promise = IssuesService.getData();\r\n    promise\r\n      .then(function(response){\r\n        $ctrl.error = response;\r\n      });\r\n\r\n   console.log(\"# of Watchers: \", $scope.$$watchersCount);\r\n   console.log(\"$ctrl.getIssues:\", $ctrl.getIssues());\r\n };\r\n\r\n $ctrl.exportIssues = (filter) => {\r\n   const promise = IssuesService.exportIssues(filter);\r\n   promise\r\n     .then((response) => {\r\n       if(response.error) $ctrl.error = \"Ошибка экспорта файла.\";\r\n       else {\r\n         const blob = new Blob([response.data], {type: response.contentType});\r\n         const objectUrl = URL.createObjectURL(blob);\r\n         const a  = document.createElement('a');\r\n         a.href     = objectUrl;\r\n         a.target   = '_blank';\r\n         a.download = 'report.xls';\r\n         document.body.appendChild(a);\r\n         a.click();\r\n       }\r\n     });\r\n };\r\n\r\n // начальная загрузка данных\r\n $ctrl.refreshIssues();\r\n\r\n}\r\n\r\n})();\r\n","(function () {\r\n\"use strict\";\r\n\r\nangular.module('app')\r\n.service('IssuesService', IssuesService);\r\n\r\nIssuesService.$inject = ['$http', '$window', 'get_issues_URL', 'save_issues_URL', 'get_report_URL', 'hide_issue_URL'];\r\nfunction IssuesService($http, $window, get_issues_URL, save_issues_URL, get_report_URL, hide_issue_URL) {\r\n  var srv = this;\r\n  srv.issues = {};\r\n  srv.issuesClone = {};\r\n  srv.changedTaskIds = {};\r\n  srv.allowCrossing = true;\r\n  srv.getIssues = () => {\r\n\t    return srv.issues;\r\n\t  };\r\n\r\n  srv.exportIssues = (filter) => {\r\n    return $http.get(get_report_URL + \"/\" + filter, { responseType: \"blob\"})\r\n    .then(\r\n  \t\t(response) => {\r\n        return {\r\n          data: response.data,\r\n          contentType: response.headers(\"Content-Type\")\r\n        };\r\n  \t\t},\r\n  \t\t(response) => { return {error: true}; }\r\n    );\r\n  };\r\n\r\n  srv.getData = () => {\r\n    return $http.get(get_issues_URL)\r\n    .then(\r\n  \t\t(response) => {\r\n        response.data.issues.forEach( issue => {\r\n          if(issue.start_date != null)\r\n            issue.start_date = new Date(issue.start_date);\r\n          if(issue.end_date != null)\r\n            issue.end_date = new Date(issue.end_date);\r\n        });\r\n\r\n  \t\t  srv.issues = response.data;\r\n        srv.issuesClone = angular.copy(srv.issues);\r\n  \t\t  return {};\r\n  \t\t},\r\n  \t\t(response) => {\r\n        $window.location.href = '/login'\r\n  \t\t\treturn response.data.error;\r\n  \t\t}\r\n    );\r\n  };\r\n\r\n  srv.getChangedIssues = () => {\r\n\t  var resArray = [];\r\n\t  for(var tId in srv.changedTaskIds){\r\n\r\n\t\t  srv.issues.issues.forEach( issue => {\r\n\t\t\t  if(issue.task_id === tId)\r\n          resArray.push(\r\n                    { task_id: \t  issue.task_id\r\n    \t\t\t\t\t\t  \t, start_date: issue.start_date\r\n    \t\t\t\t\t\t  \t, end_date:   issue.end_date\r\n    \t\t\t\t\t\t  \t, executors:  issue.executors\r\n    \t\t\t\t\t\t  \t, customer:   issue.customer\r\n    \t\t\t\t\t\t  \t, ord: \t\t    issue.ord\r\n    \t\t\t\t\t\t  \t, progress:   issue.progress}\r\n                  );\r\n\t\t\t  });\r\n\r\n\t\t  }\r\n\t  return resArray;\r\n  };\r\n\r\n  srv.saveChanges = () => {\r\n    const resArray = srv.getChangedIssues();\r\n    console.log(\"saveChanges\", resArray);\r\n    return $http.put(save_issues_URL, resArray)\r\n      .then(\r\n    \t\t(response) => {\r\n          srv.changedTaskIds = {};\r\n          console.log(\"Changes was saved\", response.data);\r\n    \t\t  return response.data;\r\n    \t\t},\r\n    \t\t(response) => {\r\n          console.log(\"Error has occurred when saving changes\", response.data);\r\n    \t\t\treturn response.data;\r\n    \t\t}\r\n      );\r\n  };\r\n\r\n  srv.cancelChanges = () => {\r\n    srv.issues = angular.copy(srv.issuesClone);\r\n    console.log(\"Changes were canceled.\");\r\n  };\r\n\r\n  srv.hideIssue = (task_id) => {\r\n    console.log(\"hideIssue\", task_id);\r\n\r\n    return $http.put(hide_issue_URL, {task_id})\r\n      .then(\r\n    \t\t(response) => {\r\n          var index = getIndexByTask_id(task_id, srv.issues.issues);\r\n          if(index === undefined) {\r\n            console.log(\"The issue was not found\", task_id);\r\n          }\r\n          else {\r\n            srv.issues.issues.splice(index, 1);\r\n            srv.issuesClone.issues.splice(index, 1);\r\n            console.log(\"The issue was hidden\", task_id);\r\n          }\r\n    \t\t},\r\n    \t\t(response) => { console.log(\"Errors occurred when hiding the issue\", task_id); }\r\n      );\r\n  };\r\n\r\n  srv.addChangedTaskId = (pTask_id) => {\r\n\t  srv.changedTaskIds[pTask_id] = 1;\r\n    console.log(\"srv.changedTaskIds\", srv.changedTaskIds);\r\n  };\r\n\r\n  srv.getIntersectionType = (pTask_id1, pTask_id2) => {\r\n\t  var d1 = null;\r\n\t  var d2 = null;\r\n\t  var d3 = null;\r\n\t  var d4 = null;\r\n\t  var intersectionType = -1;\r\n\r\n\t  let fullCompare = (pD1, pD2, pD3, pD4) => {\r\n\t\t  var res = 0;\r\n\t\t  if(pD1 < pD3 && pD2 >= pD3 && pD2 < pD4)\r\n\t\t\t  res = 1;\r\n\t\t  if(pD3 < pD1 && pD4 >= pD1 && pD4 < pD2)\r\n\t\t\t  res = 2;\r\n\t\t  if(pD1 <= pD3 && pD4 <= pD2)\r\n\t\t\t  res = 3;\r\n\t\t  if((pD1 >= pD3 && pD4 > pD2) || (pD1 > pD3 && pD4 >= pD2))\r\n\t\t\t  res = 4;\r\n\t\t  return res;\r\n\t  }\r\n\r\n\t  srv.issues.issues.forEach(issue => {\r\n\t\t  if(issue.task_id == pTask_id1) {\r\n\t\t\t  d1 = issue.start_date;\r\n\t\t\t  d2 = issue.end_date;\r\n\t\t  }\r\n\t\t  if(issue.task_id == pTask_id2) {\r\n\t\t\t  d3 = issue.start_date;\r\n\t\t\t  d4 = issue.end_date;\r\n\t\t  }\r\n\t  });\r\n\r\n\t  if(pTask_id1 != null && pTask_id2 != null) {\r\n\t\t  intersectionType = 0;\r\n\t\t  if(d1 != null && d2 != null && d3 != null) {\r\n\t\t\t  if(d4 == null) {\r\n\t\t\t\t  if(d3 < d1 || d3 > d2)\r\n\t\t\t\t\t  intersectionType = 0;\r\n\t\t\t\t  else\r\n\t\t\t\t\t  intersectionType = 1;\r\n\t\t\t  }\r\n\t\t\t  else {\r\n\t\t\t\t  intersectionType = fullCompare (d1, d2, d3, d4);\r\n\t\t\t  }\r\n\t\t  }\r\n\r\n\t\t  if(d3 != null && d4 != null && d1 != null) {\r\n\r\n\t\t\t  if(d2 == null) {\r\n\t\t\t\t  if(d1 < d3 || d1 > d4)\r\n\t\t\t\t\t  intersectionType = 0;\r\n\t\t\t\t  else\r\n\t\t\t\t\t  intersectionType = 2;\r\n\t\t\t  }\r\n\t\t\t  else {\r\n\t\t\t\t  intersectionType = fullCompare (d1, d2, d3, d4);\r\n\t\t\t  }\r\n\t\t  }\r\n\r\n\t  }\r\n\r\n\t  return intersectionType;\r\n  }\r\n\r\n  srv.prepareChanges = (pTask_id, pField, pData) => {\r\n\r\n\t  const currentIssue = getIssueByTask_id(pTask_id, srv.issues.issues);\r\n\r\n\t  switch (pField) {\r\n\t\t  case \"start_date\":\r\n\t\t\t  if(currentIssue.end_date != null && pData > currentIssue.end_date) {\r\n\t\t\t\t  var period = 0;\r\n\t\t\t\t  if(currentIssue.start_date != null)\r\n\t\t\t\t\t  period = currentIssue.end_date.getDate() - currentIssue.start_date.getDate();\r\n\t\t\t\t  currentIssue.end_date = plusDays(pData, period);\r\n\t\t\t  }\r\n\t\t\t  currentIssue[pField] = new Date(pData.getTime());\r\n\t\t\t  break;\r\n\r\n\t\t  case \"end_date\":\r\n\t\t\t  if(currentIssue.start_date != null && pData < currentIssue.start_date) {\r\n\t\t\t\t  var period = 0;\r\n\t\t\t\t  if(currentIssue.end_date != null)\r\n\t\t\t\t\t  period =  currentIssue.end_date.getDate() - currentIssue.start_date.getDate();\r\n\t\t\t\t  currentIssue.start_date = plusDays(pData, -period);\r\n\t\t\t\t  srv.addChangedTaskId(pTask_id);\r\n\t\t\t  }\r\n\t\t\t  currentIssue[pField] = new Date(pData.getTime());\r\n        break;\r\n\r\n      default:\r\n        currentIssue[pField] = pData;\r\n    }\r\n\r\n    srv.addChangedTaskId(pTask_id);\r\n\r\n    // сдвиг периодов задач ,если есть пересечение\r\n    if(! srv.allowCrossing)\r\n  \t  srv.issues.issues.forEach( nextIssue => {\r\n  \t\t  if(nextIssue.task_id != pTask_id\r\n            && (pField === \"start_date\" || pField === \"end_date\")) {\r\n      \t\tconst tp = srv.getIntersectionType(currentIssue.task_id, nextIssue.task_id);\r\n          console.log(\"IntersectionType:\", tp);\r\n\r\n      \t\tif(tp > 0) {\r\n      \t\t\tconst newPeriod = getNewPeriod(currentIssue, nextIssue, tp);\r\n      \t\t\tnextIssue.start_date = newPeriod[0];\r\n      \t\t\tnextIssue.end_date   = newPeriod[1];\r\n            srv.addChangedTaskId(nextIssue.task_id);\r\n      \t\t}\r\n  \t\t\t}\r\n  \t  });\r\n\r\n\t  console.log(\"srv.changedTaskIds\", srv.changedTaskIds);\r\n\t  console.log(\"srv.issues\", srv.issues);\r\n  };\r\n\r\n  function getNewPeriod(pIssue1, pIssue2, pIntersectionType) {\r\n\t  var nDt3 = null;\r\n\t  var nDt4 = null;\r\n\t  var period = 0;\r\n\t  if(pIssue2.start_date != null && pIssue2.end_date != null)\r\n\t\t  period = pIssue2.end_date.getDate() - pIssue2.start_date.getDate();\r\n\r\n\t  switch (pIntersectionType) {\r\n\t  \tcase 1:\r\n\t  \t\tnDt3 = plusDays(pIssue1.end_date, 1);\r\n  \t\t\tif(pIssue2.end_date != null)\r\n  \t\t\t\tnDt4 = plusDays(nDt3, period);\r\n\t  \t\tbreak;\r\n\r\n\t  \tcase 2:\r\n\t  \t\tnDt4 = plusDays(pIssue1.start_date, -1);\r\n  \t\t\tif(pIssue2.end_date != null)\r\n  \t\t\t\tnDt3 = plusDays(nDt4, -period);\r\n\t  \t\tbreak;\r\n\r\n\t  \tcase 3, 4:\r\n\t  \t\tnDt3 = plusDays(pIssue1.end_date, 1);\r\n\t  \t\tnDt4 = plusDays(nDt3, period);\r\n\t  }\r\n\t  return [nDt3, nDt4];\r\n  }\r\n\r\n  function plusDays (pDate, pDays) {\r\n\t  return new Date(pDate.getFullYear(), pDate.getMonth(), pDate.getDate() + pDays);\r\n  }\r\n\r\n  function getIndexByTask_id(pTask_id, issues) {\r\n\t  var index;\r\n\t  for(let i = 0; i < issues.length; i++)\r\n\t\t  if(issues[i].task_id === pTask_id) {\r\n        index = i;\r\n\t\t\t  break;\r\n\t\t  }\r\n\t  return index;\r\n  }\r\n\r\n  function getIssueByTask_id(pTask_id, issues) {\r\n\t  var currentIssue = null;\r\n\t  for(let index in issues){\r\n\t\t  currentIssue = issues[index];\r\n\t\t  if(currentIssue.task_id == pTask_id) {\r\n\t\t\t  break;\r\n\t\t  }\r\n\t  }\r\n\t  return currentIssue;\r\n  }\r\n\r\n}\r\n\r\n})();\r\n"]}